syntax = "proto3";
package producer;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/agentero/producers";

// Manages producers and their compliance information.
service ProducerService {
  // GetAgencyProducer returns the list of producers of an agency.
  rpc GetAgencyProducers(GetAgencyProducersRequest) returns (GetAgencyProducesResponse);
  // GetProducer returns a producer with the given ID.
  rpc GetProducer(GetProducerRequest) returns (GetProducerResponse);
  // Return the list of new producers of an Agency. A producer is considered
  // new if:
  // 1. It is not in the list of processed producers.
  // 2. Since its creation, it has not been updated.
  rpc ListNewProducers(ListNewProducersRequest) 
    returns (ListNewProducersResponse);
  // Return the list of updated producers of an Agency. A producer is considered
  // updated if:
  // 1. It is not in the list of processed producers.
  // 2. Since its creation, it has been updated.
  rpc ListUpdatedProducers(ListUpdatedProducersRequest) 
    returns (ListUpdatedProducersResponse);
  // Mark a list of producers as processed, so they will not be returned
  // in future calls to ListNewProducers or ListUpdatedProducers.
  rpc MarkAsProcessed(MarkAsProcessedRequest) returns (google.protobuf.Empty);
  // NewProducer starts the onboarding process for the given producer.
  rpc NewProducer(NewProducerRequest) returns (google.protobuf.Empty);
  // NewProducers does the same as NewProducer but accepts a list of producers
  // to onboard.
  rpc NewProducers(NewProducersRequest) returns (google.protobuf.Empty);
}

// Producer represents a producer that has been onboarded.
message Producer {
  // Internal ID of the producer.
  string id = 1;
  // The name of the producer.
  string name = 2;
  // The email of the producer.
  string email = 3;
  // The NPN of the producer. This is used to retrieve the license information
  // of the producer from the NIPR API.
  string npn = 4;
  string agency_name = 5;
  // The licenses of the producer.
  repeated License licenses = 6;

  // Biographic information of the producer.
  message Biographic {
    string last_name = 1;
    string first_name = 2;
    string middle_name = 3;
    google.protobuf.Timestamp date_of_birth = 4;
    string ssn = 6;
    string fein = 7;
    string company_name = 8;
    string state_domicile = 9;
  }
  // Biographic information of the producer.
  Biographic biographic = 7;
  // ProducerRegulatoryInfo contains regulatory information about a producer.
  message ProducerRegulatoryInfo {
    message RegulatoryAction{
      string action_id = 1;
      string origin_of_action = 2;
      string reason_for_action = 3;
      string disposition = 4;
      google.protobuf.Timestamp date_of_action = 5;
      google.protobuf.Timestamp effective_date = 6;
      google.protobuf.Timestamp enter_date = 7;
      string file_ref = 8;
      string penalty_fine_forfeiture = 9;
      string length_of_order = 10; 
    }
    // Regulatory actions by state, if any.
    map<string,RegulatoryAction> regulatory_actions_by_state = 1;
    string clearance_certification_info = 2;
    string nasd_exam_details = 3;
  }
  // Producer's regulatory information.
  ProducerRegulatoryInfo regulatory_info = 8;

  message Appointment {
    string branch_id = 1;
    string company_name = 2;
    string fein = 3;
    string co_code = 4;
    string line_of_authority = 5;
    string loa_code = 6;
    string status = 7;
    string termination_reason = 8;
    string status_reason_date = 9;
    google.protobuf.Timestamp appointment_renewal_date = 10;
    string agency_affiliations = 11;
  }
  // The list of carrier appointments of the producer.
  repeated Appointment appointments = 9;
}

// Producers license information and status.
message License {
  enum LicenseStatus {
    LICENSE_STATUS_UNSPECIFIED = 0;
    LICENSE_STATUS_EXPIRED = 1;
    LICENSE_STATUS_VALID = 2;
    LICENSE_STATUS_NOT_ACTIVE = 3;
  }
    
  string license_number = 1;
  string license_state = 2;
  string residency_status = 3;
  bool active = 4;
  LicenseStatus status = 5;
  google.protobuf.Timestamp expiration_date = 6;
  google.protobuf.Timestamp updated_at = 7;
}


// Representation of a producer that we want to add.
message NewProducer {
  // The type of lookup to perform to retrieve the license information of the
  // producer.
  oneof lookup_method {
    NPNLookup npn_lookup = 1;
    AgencyLookup agency_lookup = 2;
    LicenseLookup license_lookup = 3;
    SSNLookup ssn_lookup = 4;
  }
  // The name of the producer. Not required.
  string name = 5;
  // The email of the producer. Not required.
  string email = 6;
}

// Producer lookup by NPN.
message NPNLookup {
  string npn = 1;
}

// Producer lookup by the agency's tax number.
message AgencyLookup {
  string tax_number = 1;
}

// Producer lookup by license number and state.
message LicenseLookup {
  string license_number = 1;
  string state = 2;
}

// Producer lookup with a matching tax number and last name.
message SSNLookup {
  string tax_number = 1;
  string last_name = 2;
}

// Request to list new producers for an Agency.
message ListNewProducersRequest {
  optional string agency_name = 1;
}

// Response containing a list of new producers for an Agency.
message ListNewProducersResponse {
  repeated Producer new_producers = 1;
}

// Request to list updated producers for an Agency.
message ListUpdatedProducersRequest {
  optional string agency_name = 1;
}

// Response containing a list of updated producers for an Agency.
message ListUpdatedProducersResponse {
  repeated Producer updated_producers = 1;
}

// Request to mark a list of producers as processed.
message MarkAsProcessedRequest {
  string agency_name = 1;
  repeated string producer_ids = 2;
}

// Request to onboard a new producer and automatically associate it 
// with an Agency.
// This will trigger a call to the NIPR API to retrieve license information 
// of the producer.
message NewProducerRequest {
  string agency_name = 1;
  string agency_fein = 2;
  NewProducer producer = 3;
}

// Request to onboard a list of producers and automatically associate them 
// with an Agency.
// This will trigger a call to the NIPR API to retrieve license information of 
// every producer in the list.
message NewProducersRequest {
  string agency_name = 1;
  string agency_fein = 2;
  repeated NewProducer producers = 3;
}

// Request to retrieve a producer.
message GetProducerRequest {
  message ProducerIDLookup {
    string producer_id = 1;
  }
  message ProducerNPNLookup {
    string producer_npn = 1;
  }

  message EmailLookup {
    string email = 1;
  }
  oneof lookup_method {
    ProducerIDLookup producer_id_lookup = 1;
    ProducerNPNLookup npn_lookup = 2;
    EmailLookup email_lookup = 3;
  }
}

// Response containing a producer.
message GetProducerResponse {
  Producer producer = 1;
}

message GetAgencyProducersRequest {
  string agency_name = 1;
}

message GetAgencyProducesResponse {
  repeated Producer producers = 1;
}