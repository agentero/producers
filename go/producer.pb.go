// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0
// source: producer.proto

package producers

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type License_LicenseStatus int32

const (
	License_LICENSE_STATUS_UNSPECIFIED License_LicenseStatus = 0
	License_LICENSE_STATUS_EXPIRED     License_LicenseStatus = 1
	License_LICENSE_STATUS_VALID       License_LicenseStatus = 2
	License_LICENSE_STATUS_NOT_ACTIVE  License_LicenseStatus = 3
)

// Enum value maps for License_LicenseStatus.
var (
	License_LicenseStatus_name = map[int32]string{
		0: "LICENSE_STATUS_UNSPECIFIED",
		1: "LICENSE_STATUS_EXPIRED",
		2: "LICENSE_STATUS_VALID",
		3: "LICENSE_STATUS_NOT_ACTIVE",
	}
	License_LicenseStatus_value = map[string]int32{
		"LICENSE_STATUS_UNSPECIFIED": 0,
		"LICENSE_STATUS_EXPIRED":     1,
		"LICENSE_STATUS_VALID":       2,
		"LICENSE_STATUS_NOT_ACTIVE":  3,
	}
)

func (x License_LicenseStatus) Enum() *License_LicenseStatus {
	p := new(License_LicenseStatus)
	*p = x
	return p
}

func (x License_LicenseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (License_LicenseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_producer_proto_enumTypes[0].Descriptor()
}

func (License_LicenseStatus) Type() protoreflect.EnumType {
	return &file_producer_proto_enumTypes[0]
}

func (x License_LicenseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use License_LicenseStatus.Descriptor instead.
func (License_LicenseStatus) EnumDescriptor() ([]byte, []int) {
	return file_producer_proto_rawDescGZIP(), []int{1, 0}
}

// Producer represents a producer that has been onboarded.
type Producer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Internal ID of the producer.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the producer.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The email of the producer.
	Email string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	// The NPN of the producer. This is used to retrieve the license information
	// of the producer from the NIPR API.
	Npn        string `protobuf:"bytes,4,opt,name=npn,proto3" json:"npn,omitempty"`
	AgencyName string `protobuf:"bytes,5,opt,name=agency_name,json=agencyName,proto3" json:"agency_name,omitempty"`
	// The licenses of the producer.
	Licenses []*License `protobuf:"bytes,6,rep,name=licenses,proto3" json:"licenses,omitempty"`
	// Biographic information of the producer.
	Biographic *Producer_Biographic `protobuf:"bytes,7,opt,name=biographic,proto3" json:"biographic,omitempty"`
	// Producer's regulatory information.
	RegulatoryInfo *Producer_ProducerRegulatoryInfo `protobuf:"bytes,8,opt,name=regulatory_info,json=regulatoryInfo,proto3" json:"regulatory_info,omitempty"`
	// The list of carrier appointments of the producer.
	Appointments []*Producer_Appointment `protobuf:"bytes,9,rep,name=appointments,proto3" json:"appointments,omitempty"`
}

func (x *Producer) Reset() {
	*x = Producer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_producer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Producer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Producer) ProtoMessage() {}

func (x *Producer) ProtoReflect() protoreflect.Message {
	mi := &file_producer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Producer.ProtoReflect.Descriptor instead.
func (*Producer) Descriptor() ([]byte, []int) {
	return file_producer_proto_rawDescGZIP(), []int{0}
}

func (x *Producer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Producer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Producer) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Producer) GetNpn() string {
	if x != nil {
		return x.Npn
	}
	return ""
}

func (x *Producer) GetAgencyName() string {
	if x != nil {
		return x.AgencyName
	}
	return ""
}

func (x *Producer) GetLicenses() []*License {
	if x != nil {
		return x.Licenses
	}
	return nil
}

func (x *Producer) GetBiographic() *Producer_Biographic {
	if x != nil {
		return x.Biographic
	}
	return nil
}

func (x *Producer) GetRegulatoryInfo() *Producer_ProducerRegulatoryInfo {
	if x != nil {
		return x.RegulatoryInfo
	}
	return nil
}

func (x *Producer) GetAppointments() []*Producer_Appointment {
	if x != nil {
		return x.Appointments
	}
	return nil
}

// Producers license information and status.
type License struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LicenseNumber   string                 `protobuf:"bytes,1,opt,name=license_number,json=licenseNumber,proto3" json:"license_number,omitempty"`
	LicenseState    string                 `protobuf:"bytes,2,opt,name=license_state,json=licenseState,proto3" json:"license_state,omitempty"`
	ResidencyStatus string                 `protobuf:"bytes,3,opt,name=residency_status,json=residencyStatus,proto3" json:"residency_status,omitempty"`
	Active          bool                   `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty"`
	Status          License_LicenseStatus  `protobuf:"varint,5,opt,name=status,proto3,enum=producer.License_LicenseStatus" json:"status,omitempty"`
	ExpirationDate  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *License) Reset() {
	*x = License{}
	if protoimpl.UnsafeEnabled {
		mi := &file_producer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *License) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*License) ProtoMessage() {}

func (x *License) ProtoReflect() protoreflect.Message {
	mi := &file_producer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use License.ProtoReflect.Descriptor instead.
func (*License) Descriptor() ([]byte, []int) {
	return file_producer_proto_rawDescGZIP(), []int{1}
}

func (x *License) GetLicenseNumber() string {
	if x != nil {
		return x.LicenseNumber
	}
	return ""
}

func (x *License) GetLicenseState() string {
	if x != nil {
		return x.LicenseState
	}
	return ""
}

func (x *License) GetResidencyStatus() string {
	if x != nil {
		return x.ResidencyStatus
	}
	return ""
}

func (x *License) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *License) GetStatus() License_LicenseStatus {
	if x != nil {
		return x.Status
	}
	return License_LICENSE_STATUS_UNSPECIFIED
}

func (x *License) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *License) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// Representation of a producer that we want to add.
type NewProducer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of lookup to perform to retrieve the license information of the
	// producer.
	//
	// Types that are assignable to LookupMethod:
	//
	//	*NewProducer_NpnLookup
	//	*NewProducer_AgencyLookup
	//	*NewProducer_LicenseLookup
	//	*NewProducer_SsnLookup
	LookupMethod isNewProducer_LookupMethod `protobuf_oneof:"lookup_method"`
	// The name of the producer. Not required.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// The email of the producer. Not required.
	Email string `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *NewProducer) Reset() {
	*x = NewProducer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_producer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewProducer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewProducer) ProtoMessage() {}

func (x *NewProducer) ProtoReflect() protoreflect.Message {
	mi := &file_producer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewProducer.ProtoReflect.Descriptor instead.
func (*NewProducer) Descriptor() ([]byte, []int) {
	return file_producer_proto_rawDescGZIP(), []int{2}
}

func (m *NewProducer) GetLookupMethod() isNewProducer_LookupMethod {
	if m != nil {
		return m.LookupMethod
	}
	return nil
}

func (x *NewProducer) GetNpnLookup() *NPNLookup {
	if x, ok := x.GetLookupMethod().(*NewProducer_NpnLookup); ok {
		return x.NpnLookup
	}
	return nil
}

func (x *NewProducer) GetAgencyLookup() *AgencyLookup {
	if x, ok := x.GetLookupMethod().(*NewProducer_AgencyLookup); ok {
		return x.AgencyLookup
	}
	return nil
}

func (x *NewProducer) GetLicenseLookup() *LicenseLookup {
	if x, ok := x.GetLookupMethod().(*NewProducer_LicenseLookup); ok {
		return x.LicenseLookup
	}
	return nil
}

func (x *NewProducer) GetSsnLookup() *SSNLookup {
	if x, ok := x.GetLookupMethod().(*NewProducer_SsnLookup); ok {
		return x.SsnLookup
	}
	return nil
}

func (x *NewProducer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NewProducer) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type isNewProducer_LookupMethod interface {
	isNewProducer_LookupMethod()
}

type NewProducer_NpnLookup struct {
	NpnLookup *NPNLookup `protobuf:"bytes,1,opt,name=npn_lookup,json=npnLookup,proto3,oneof"`
}

type NewProducer_AgencyLookup struct {
	AgencyLookup *AgencyLookup `protobuf:"bytes,2,opt,name=agency_lookup,json=agencyLookup,proto3,oneof"`
}

type NewProducer_LicenseLookup struct {
	LicenseLookup *LicenseLookup `protobuf:"bytes,3,opt,name=license_lookup,json=licenseLookup,proto3,oneof"`
}

type NewProducer_SsnLookup struct {
	SsnLookup *SSNLookup `protobuf:"bytes,4,opt,name=ssn_lookup,json=ssnLookup,proto3,oneof"`
}

func (*NewProducer_NpnLookup) isNewProducer_LookupMethod() {}

func (*NewProducer_AgencyLookup) isNewProducer_LookupMethod() {}

func (*NewProducer_LicenseLookup) isNewProducer_LookupMethod() {}

func (*NewProducer_SsnLookup) isNewProducer_LookupMethod() {}

// Producer lookup by NPN.
type NPNLookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Npn string `protobuf:"bytes,1,opt,name=npn,proto3" json:"npn,omitempty"`
}

func (x *NPNLookup) Reset() {
	*x = NPNLookup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_producer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NPNLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NPNLookup) ProtoMessage() {}

func (x *NPNLookup) ProtoReflect() protoreflect.Message {
	mi := &file_producer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NPNLookup.ProtoReflect.Descriptor instead.
func (*NPNLookup) Descriptor() ([]byte, []int) {
	return file_producer_proto_rawDescGZIP(), []int{3}
}

func (x *NPNLookup) GetNpn() string {
	if x != nil {
		return x.Npn
	}
	return ""
}

// Producer lookup by the agency's tax number.
type AgencyLookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxNumber string `protobuf:"bytes,1,opt,name=tax_number,json=taxNumber,proto3" json:"tax_number,omitempty"`
}

func (x *AgencyLookup) Reset() {
	*x = AgencyLookup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_producer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgencyLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgencyLookup) ProtoMessage() {}

func (x *AgencyLookup) ProtoReflect() protoreflect.Message {
	mi := &file_producer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgencyLookup.ProtoReflect.Descriptor instead.
func (*AgencyLookup) Descriptor() ([]byte, []int) {
	return file_producer_proto_rawDescGZIP(), []int{4}
}

func (x *AgencyLookup) GetTaxNumber() string {
	if x != nil {
		return x.TaxNumber
	}
	return ""
}

// Producer lookup by license number and state.
type LicenseLookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LicenseNumber string `protobuf:"bytes,1,opt,name=license_number,json=licenseNumber,proto3" json:"license_number,omitempty"`
	State         string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *LicenseLookup) Reset() {
	*x = LicenseLookup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_producer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseLookup) ProtoMessage() {}

func (x *LicenseLookup) ProtoReflect() protoreflect.Message {
	mi := &file_producer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseLookup.ProtoReflect.Descriptor instead.
func (*LicenseLookup) Descriptor() ([]byte, []int) {
	return file_producer_proto_rawDescGZIP(), []int{5}
}

func (x *LicenseLookup) GetLicenseNumber() string {
	if x != nil {
		return x.LicenseNumber
	}
	return ""
}

func (x *LicenseLookup) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

// Producer lookup with a matching tax number and last name.
type SSNLookup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxNumber string `protobuf:"bytes,1,opt,name=tax_number,json=taxNumber,proto3" json:"tax_number,omitempty"`
	LastName  string `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
}

func (x *SSNLookup) Reset() {
	*x = SSNLookup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_producer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SSNLookup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SSNLookup) ProtoMessage() {}

func (x *SSNLookup) ProtoReflect() protoreflect.Message {
	mi := &file_producer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SSNLookup.ProtoReflect.Descriptor instead.
func (*SSNLookup) Descriptor() ([]byte, []int) {
	return file_producer_proto_rawDescGZIP(), []int{6}
}

func (x *SSNLookup) GetTaxNumber() string {
	if x != nil {
		return x.TaxNumber
	}
	return ""
}

func (x *SSNLookup) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

// Request to list new producers for an Agency.
type ListNewProducersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgencyName *string `protobuf:"bytes,1,opt,name=agency_name,json=agencyName,proto3,oneof" json:"agency_name,omitempty"`
}

func (x *ListNewProducersRequest) Reset() {
	*x = ListNewProducersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_producer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNewProducersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNewProducersRequest) ProtoMessage() {}

func (x *ListNewProducersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_producer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNewProducersRequest.ProtoReflect.Descriptor instead.
func (*ListNewProducersRequest) Descriptor() ([]byte, []int) {
	return file_producer_proto_rawDescGZIP(), []int{7}
}

func (x *ListNewProducersRequest) GetAgencyName() string {
	if x != nil && x.AgencyName != nil {
		return *x.AgencyName
	}
	return ""
}

// Response containing a list of new producers for an Agency.
type ListNewProducersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewProducers []*Producer `protobuf:"bytes,1,rep,name=new_producers,json=newProducers,proto3" json:"new_producers,omitempty"`
}

func (x *ListNewProducersResponse) Reset() {
	*x = ListNewProducersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_producer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNewProducersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNewProducersResponse) ProtoMessage() {}

func (x *ListNewProducersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_producer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNewProducersResponse.ProtoReflect.Descriptor instead.
func (*ListNewProducersResponse) Descriptor() ([]byte, []int) {
	return file_producer_proto_rawDescGZIP(), []int{8}
}

func (x *ListNewProducersResponse) GetNewProducers() []*Producer {
	if x != nil {
		return x.NewProducers
	}
	return nil
}

// Request to list updated producers for an Agency.
type ListUpdatedProducersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgencyName *string `protobuf:"bytes,1,opt,name=agency_name,json=agencyName,proto3,oneof" json:"agency_name,omitempty"`
}

func (x *ListUpdatedProducersRequest) Reset() {
	*x = ListUpdatedProducersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_producer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUpdatedProducersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUpdatedProducersRequest) ProtoMessage() {}

func (x *ListUpdatedProducersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_producer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUpdatedProducersRequest.ProtoReflect.Descriptor instead.
func (*ListUpdatedProducersRequest) Descriptor() ([]byte, []int) {
	return file_producer_proto_rawDescGZIP(), []int{9}
}

func (x *ListUpdatedProducersRequest) GetAgencyName() string {
	if x != nil && x.AgencyName != nil {
		return *x.AgencyName
	}
	return ""
}

// Response containing a list of updated producers for an Agency.
type ListUpdatedProducersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatedProducers []*Producer `protobuf:"bytes,1,rep,name=updated_producers,json=updatedProducers,proto3" json:"updated_producers,omitempty"`
}

func (x *ListUpdatedProducersResponse) Reset() {
	*x = ListUpdatedProducersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_producer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUpdatedProducersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUpdatedProducersResponse) ProtoMessage() {}

func (x *ListUpdatedProducersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_producer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUpdatedProducersResponse.ProtoReflect.Descriptor instead.
func (*ListUpdatedProducersResponse) Descriptor() ([]byte, []int) {
	return file_producer_proto_rawDescGZIP(), []int{10}
}

func (x *ListUpdatedProducersResponse) GetUpdatedProducers() []*Producer {
	if x != nil {
		return x.UpdatedProducers
	}
	return nil
}

// Request to mark a list of producers as processed.
type MarkAsProcessedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgencyName  string   `protobuf:"bytes,1,opt,name=agency_name,json=agencyName,proto3" json:"agency_name,omitempty"`
	ProducerIds []string `protobuf:"bytes,2,rep,name=producer_ids,json=producerIds,proto3" json:"producer_ids,omitempty"`
}

func (x *MarkAsProcessedRequest) Reset() {
	*x = MarkAsProcessedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_producer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkAsProcessedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkAsProcessedRequest) ProtoMessage() {}

func (x *MarkAsProcessedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_producer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkAsProcessedRequest.ProtoReflect.Descriptor instead.
func (*MarkAsProcessedRequest) Descriptor() ([]byte, []int) {
	return file_producer_proto_rawDescGZIP(), []int{11}
}

func (x *MarkAsProcessedRequest) GetAgencyName() string {
	if x != nil {
		return x.AgencyName
	}
	return ""
}

func (x *MarkAsProcessedRequest) GetProducerIds() []string {
	if x != nil {
		return x.ProducerIds
	}
	return nil
}

// Request to onboard a new producer and automatically associate it
// with an Agency.
// This will trigger a call to the NIPR API to retrieve license information
// of the producer.
type NewProducerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgencyName string       `protobuf:"bytes,1,opt,name=agency_name,json=agencyName,proto3" json:"agency_name,omitempty"`
	AgencyFein string       `protobuf:"bytes,2,opt,name=agency_fein,json=agencyFein,proto3" json:"agency_fein,omitempty"`
	Producer   *NewProducer `protobuf:"bytes,3,opt,name=producer,proto3" json:"producer,omitempty"`
}

func (x *NewProducerRequest) Reset() {
	*x = NewProducerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_producer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewProducerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewProducerRequest) ProtoMessage() {}

func (x *NewProducerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_producer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewProducerRequest.ProtoReflect.Descriptor instead.
func (*NewProducerRequest) Descriptor() ([]byte, []int) {
	return file_producer_proto_rawDescGZIP(), []int{12}
}

func (x *NewProducerRequest) GetAgencyName() string {
	if x != nil {
		return x.AgencyName
	}
	return ""
}

func (x *NewProducerRequest) GetAgencyFein() string {
	if x != nil {
		return x.AgencyFein
	}
	return ""
}

func (x *NewProducerRequest) GetProducer() *NewProducer {
	if x != nil {
		return x.Producer
	}
	return nil
}

// Request to onboard a list of producers and automatically associate them
// with an Agency.
// This will trigger a call to the NIPR API to retrieve license information of
// every producer in the list.
type NewProducersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgencyName string         `protobuf:"bytes,1,opt,name=agency_name,json=agencyName,proto3" json:"agency_name,omitempty"`
	AgencyFein string         `protobuf:"bytes,2,opt,name=agency_fein,json=agencyFein,proto3" json:"agency_fein,omitempty"`
	Producers  []*NewProducer `protobuf:"bytes,3,rep,name=producers,proto3" json:"producers,omitempty"`
}

func (x *NewProducersRequest) Reset() {
	*x = NewProducersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_producer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewProducersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewProducersRequest) ProtoMessage() {}

func (x *NewProducersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_producer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewProducersRequest.ProtoReflect.Descriptor instead.
func (*NewProducersRequest) Descriptor() ([]byte, []int) {
	return file_producer_proto_rawDescGZIP(), []int{13}
}

func (x *NewProducersRequest) GetAgencyName() string {
	if x != nil {
		return x.AgencyName
	}
	return ""
}

func (x *NewProducersRequest) GetAgencyFein() string {
	if x != nil {
		return x.AgencyFein
	}
	return ""
}

func (x *NewProducersRequest) GetProducers() []*NewProducer {
	if x != nil {
		return x.Producers
	}
	return nil
}

// Biographic information of the producer.
type Producer_Biographic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastName      string                 `protobuf:"bytes,1,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	FirstName     string                 `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	MiddleName    string                 `protobuf:"bytes,3,opt,name=middle_name,json=middleName,proto3" json:"middle_name,omitempty"`
	DateOfBirth   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=date_of_birth,json=dateOfBirth,proto3" json:"date_of_birth,omitempty"`
	Ssn           string                 `protobuf:"bytes,6,opt,name=ssn,proto3" json:"ssn,omitempty"`
	Fein          string                 `protobuf:"bytes,7,opt,name=fein,proto3" json:"fein,omitempty"`
	CompanyName   string                 `protobuf:"bytes,8,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	StateDomicile string                 `protobuf:"bytes,9,opt,name=state_domicile,json=stateDomicile,proto3" json:"state_domicile,omitempty"`
}

func (x *Producer_Biographic) Reset() {
	*x = Producer_Biographic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_producer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Producer_Biographic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Producer_Biographic) ProtoMessage() {}

func (x *Producer_Biographic) ProtoReflect() protoreflect.Message {
	mi := &file_producer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Producer_Biographic.ProtoReflect.Descriptor instead.
func (*Producer_Biographic) Descriptor() ([]byte, []int) {
	return file_producer_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Producer_Biographic) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Producer_Biographic) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Producer_Biographic) GetMiddleName() string {
	if x != nil {
		return x.MiddleName
	}
	return ""
}

func (x *Producer_Biographic) GetDateOfBirth() *timestamppb.Timestamp {
	if x != nil {
		return x.DateOfBirth
	}
	return nil
}

func (x *Producer_Biographic) GetSsn() string {
	if x != nil {
		return x.Ssn
	}
	return ""
}

func (x *Producer_Biographic) GetFein() string {
	if x != nil {
		return x.Fein
	}
	return ""
}

func (x *Producer_Biographic) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *Producer_Biographic) GetStateDomicile() string {
	if x != nil {
		return x.StateDomicile
	}
	return ""
}

// ProducerRegulatoryInfo contains regulatory information about a producer.
type Producer_ProducerRegulatoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Regulatory actions by state, if any.
	RegulatoryActionsByState   map[string]*Producer_ProducerRegulatoryInfo_RegulatoryAction `protobuf:"bytes,1,rep,name=regulatory_actions_by_state,json=regulatoryActionsByState,proto3" json:"regulatory_actions_by_state,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ClearanceCertificationInfo string                                                       `protobuf:"bytes,2,opt,name=clearance_certification_info,json=clearanceCertificationInfo,proto3" json:"clearance_certification_info,omitempty"`
	NasdExamDetails            string                                                       `protobuf:"bytes,3,opt,name=nasd_exam_details,json=nasdExamDetails,proto3" json:"nasd_exam_details,omitempty"`
}

func (x *Producer_ProducerRegulatoryInfo) Reset() {
	*x = Producer_ProducerRegulatoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_producer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Producer_ProducerRegulatoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Producer_ProducerRegulatoryInfo) ProtoMessage() {}

func (x *Producer_ProducerRegulatoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_producer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Producer_ProducerRegulatoryInfo.ProtoReflect.Descriptor instead.
func (*Producer_ProducerRegulatoryInfo) Descriptor() ([]byte, []int) {
	return file_producer_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Producer_ProducerRegulatoryInfo) GetRegulatoryActionsByState() map[string]*Producer_ProducerRegulatoryInfo_RegulatoryAction {
	if x != nil {
		return x.RegulatoryActionsByState
	}
	return nil
}

func (x *Producer_ProducerRegulatoryInfo) GetClearanceCertificationInfo() string {
	if x != nil {
		return x.ClearanceCertificationInfo
	}
	return ""
}

func (x *Producer_ProducerRegulatoryInfo) GetNasdExamDetails() string {
	if x != nil {
		return x.NasdExamDetails
	}
	return ""
}

type Producer_Appointment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BranchId               string                 `protobuf:"bytes,1,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	CompanyName            string                 `protobuf:"bytes,2,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	Fein                   string                 `protobuf:"bytes,3,opt,name=fein,proto3" json:"fein,omitempty"`
	CoCode                 string                 `protobuf:"bytes,4,opt,name=co_code,json=coCode,proto3" json:"co_code,omitempty"`
	LineOfAuthority        string                 `protobuf:"bytes,5,opt,name=line_of_authority,json=lineOfAuthority,proto3" json:"line_of_authority,omitempty"`
	LoaCode                string                 `protobuf:"bytes,6,opt,name=loa_code,json=loaCode,proto3" json:"loa_code,omitempty"`
	Status                 string                 `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	TerminationReason      string                 `protobuf:"bytes,8,opt,name=termination_reason,json=terminationReason,proto3" json:"termination_reason,omitempty"`
	StatusReasonDate       string                 `protobuf:"bytes,9,opt,name=status_reason_date,json=statusReasonDate,proto3" json:"status_reason_date,omitempty"`
	AppointmentRenewalDate *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=appointment_renewal_date,json=appointmentRenewalDate,proto3" json:"appointment_renewal_date,omitempty"`
	AgencyAffiliations     string                 `protobuf:"bytes,11,opt,name=agency_affiliations,json=agencyAffiliations,proto3" json:"agency_affiliations,omitempty"`
}

func (x *Producer_Appointment) Reset() {
	*x = Producer_Appointment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_producer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Producer_Appointment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Producer_Appointment) ProtoMessage() {}

func (x *Producer_Appointment) ProtoReflect() protoreflect.Message {
	mi := &file_producer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Producer_Appointment.ProtoReflect.Descriptor instead.
func (*Producer_Appointment) Descriptor() ([]byte, []int) {
	return file_producer_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Producer_Appointment) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

func (x *Producer_Appointment) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *Producer_Appointment) GetFein() string {
	if x != nil {
		return x.Fein
	}
	return ""
}

func (x *Producer_Appointment) GetCoCode() string {
	if x != nil {
		return x.CoCode
	}
	return ""
}

func (x *Producer_Appointment) GetLineOfAuthority() string {
	if x != nil {
		return x.LineOfAuthority
	}
	return ""
}

func (x *Producer_Appointment) GetLoaCode() string {
	if x != nil {
		return x.LoaCode
	}
	return ""
}

func (x *Producer_Appointment) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Producer_Appointment) GetTerminationReason() string {
	if x != nil {
		return x.TerminationReason
	}
	return ""
}

func (x *Producer_Appointment) GetStatusReasonDate() string {
	if x != nil {
		return x.StatusReasonDate
	}
	return ""
}

func (x *Producer_Appointment) GetAppointmentRenewalDate() *timestamppb.Timestamp {
	if x != nil {
		return x.AppointmentRenewalDate
	}
	return nil
}

func (x *Producer_Appointment) GetAgencyAffiliations() string {
	if x != nil {
		return x.AgencyAffiliations
	}
	return ""
}

type Producer_ProducerRegulatoryInfo_RegulatoryAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionId              string                 `protobuf:"bytes,1,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	OriginOfAction        string                 `protobuf:"bytes,2,opt,name=origin_of_action,json=originOfAction,proto3" json:"origin_of_action,omitempty"`
	ReasonForAction       string                 `protobuf:"bytes,3,opt,name=reason_for_action,json=reasonForAction,proto3" json:"reason_for_action,omitempty"`
	Disposition           string                 `protobuf:"bytes,4,opt,name=disposition,proto3" json:"disposition,omitempty"`
	DateOfAction          *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=date_of_action,json=dateOfAction,proto3" json:"date_of_action,omitempty"`
	EffectiveDate         *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=effective_date,json=effectiveDate,proto3" json:"effective_date,omitempty"`
	EnterDate             *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=enter_date,json=enterDate,proto3" json:"enter_date,omitempty"`
	FileRef               string                 `protobuf:"bytes,8,opt,name=file_ref,json=fileRef,proto3" json:"file_ref,omitempty"`
	PenaltyFineForfeiture string                 `protobuf:"bytes,9,opt,name=penalty_fine_forfeiture,json=penaltyFineForfeiture,proto3" json:"penalty_fine_forfeiture,omitempty"`
	LengthOfOrder         string                 `protobuf:"bytes,10,opt,name=length_of_order,json=lengthOfOrder,proto3" json:"length_of_order,omitempty"`
}

func (x *Producer_ProducerRegulatoryInfo_RegulatoryAction) Reset() {
	*x = Producer_ProducerRegulatoryInfo_RegulatoryAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_producer_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Producer_ProducerRegulatoryInfo_RegulatoryAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Producer_ProducerRegulatoryInfo_RegulatoryAction) ProtoMessage() {}

func (x *Producer_ProducerRegulatoryInfo_RegulatoryAction) ProtoReflect() protoreflect.Message {
	mi := &file_producer_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Producer_ProducerRegulatoryInfo_RegulatoryAction.ProtoReflect.Descriptor instead.
func (*Producer_ProducerRegulatoryInfo_RegulatoryAction) Descriptor() ([]byte, []int) {
	return file_producer_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Producer_ProducerRegulatoryInfo_RegulatoryAction) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

func (x *Producer_ProducerRegulatoryInfo_RegulatoryAction) GetOriginOfAction() string {
	if x != nil {
		return x.OriginOfAction
	}
	return ""
}

func (x *Producer_ProducerRegulatoryInfo_RegulatoryAction) GetReasonForAction() string {
	if x != nil {
		return x.ReasonForAction
	}
	return ""
}

func (x *Producer_ProducerRegulatoryInfo_RegulatoryAction) GetDisposition() string {
	if x != nil {
		return x.Disposition
	}
	return ""
}

func (x *Producer_ProducerRegulatoryInfo_RegulatoryAction) GetDateOfAction() *timestamppb.Timestamp {
	if x != nil {
		return x.DateOfAction
	}
	return nil
}

func (x *Producer_ProducerRegulatoryInfo_RegulatoryAction) GetEffectiveDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectiveDate
	}
	return nil
}

func (x *Producer_ProducerRegulatoryInfo_RegulatoryAction) GetEnterDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EnterDate
	}
	return nil
}

func (x *Producer_ProducerRegulatoryInfo_RegulatoryAction) GetFileRef() string {
	if x != nil {
		return x.FileRef
	}
	return ""
}

func (x *Producer_ProducerRegulatoryInfo_RegulatoryAction) GetPenaltyFineForfeiture() string {
	if x != nil {
		return x.PenaltyFineForfeiture
	}
	return ""
}

func (x *Producer_ProducerRegulatoryInfo_RegulatoryAction) GetLengthOfOrder() string {
	if x != nil {
		return x.LengthOfOrder
	}
	return ""
}

var File_producer_proto protoreflect.FileDescriptor

var file_producer_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xda, 0x0f, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x10, 0x0a, 0x03, 0x6e, 0x70, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6e, 0x70,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x62, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x2e, 0x42, 0x69, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x52, 0x0a, 0x62, 0x69, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63,
	0x12, 0x52, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x2e, 0x41,
	0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x99, 0x02, 0x0a, 0x0a, 0x42, 0x69, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f,
	0x62, 0x69, 0x72, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x42,
	0x69, 0x72, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x73, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x73, 0x73, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x65, 0x69, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x65, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x69, 0x63, 0x69, 0x6c, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x69,
	0x63, 0x69, 0x6c, 0x65, 0x1a, 0xfe, 0x06, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x86, 0x01, 0x0a, 0x1b, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18,
	0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x1c, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x61,
	0x73, 0x64, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x61, 0x73, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0xe2, 0x03, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x4f, 0x66, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x40, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x12, 0x36, 0x0a, 0x17, 0x70,
	0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x66,
	0x65, 0x69, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x46, 0x69, 0x6e, 0x65, 0x46, 0x6f, 0x72, 0x66, 0x65, 0x69, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x6f, 0x66,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x4f, 0x66, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x87, 0x01, 0x0a, 0x1d,
	0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x50, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xbd, 0x03, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x65, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x65, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c,
	0x69, 0x6e, 0x65, 0x4f, 0x66, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x6f, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6c, 0x6f, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x54,
	0x0a, 0x18, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x6e, 0x65, 0x77, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x61, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x61,
	0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd8, 0x03, 0x0a, 0x07, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x0d, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x4c,
	0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4c,
	0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58,
	0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x49, 0x43, 0x45, 0x4e,
	0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03,
	0x22, 0xb5, 0x02, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x12, 0x34, 0x0a, 0x0a, 0x6e, 0x70, 0x6e, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x2e,
	0x4e, 0x50, 0x4e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x70, 0x6e,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x3d, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x40, 0x0a, 0x0e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x34, 0x0a, 0x0a, 0x73, 0x73, 0x6e, 0x5f, 0x6c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x2e, 0x53, 0x53, 0x4e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x48, 0x00, 0x52, 0x09, 0x73, 0x73, 0x6e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x6c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x1d, 0x0a, 0x09, 0x4e, 0x50, 0x4e, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x70, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6e, 0x70, 0x6e, 0x22, 0x2d, 0x0a, 0x0c, 0x41, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x78, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x78,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x4c, 0x0a, 0x0d, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x47, 0x0a, 0x09, 0x53, 0x53, 0x4e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4f, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0a, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x53,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x6e, 0x65,
	0x77, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x73, 0x22, 0x53, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x63,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5f, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x22, 0x5c, 0x0a, 0x16, 0x4d, 0x61, 0x72,
	0x6b, 0x41, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x66, 0x65, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x69, 0x6e,
	0x12, 0x31, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x2e, 0x4e, 0x65,
	0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x22, 0x8c, 0x01, 0x0a, 0x13, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x66, 0x65, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x69, 0x6e, 0x12, 0x33, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x73, 0x32, 0xac, 0x03, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65,
	0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x77,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x65, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x4d, 0x61, 0x72, 0x6b,
	0x41, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x20, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x73, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x2e,
	0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x0c, 0x4e, 0x65,
	0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x42, 0x1f, 0x5a, 0x1d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_producer_proto_rawDescOnce sync.Once
	file_producer_proto_rawDescData = file_producer_proto_rawDesc
)

func file_producer_proto_rawDescGZIP() []byte {
	file_producer_proto_rawDescOnce.Do(func() {
		file_producer_proto_rawDescData = protoimpl.X.CompressGZIP(file_producer_proto_rawDescData)
	})
	return file_producer_proto_rawDescData
}

var file_producer_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_producer_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_producer_proto_goTypes = []interface{}{
	(License_LicenseStatus)(0),                               // 0: producer.License.LicenseStatus
	(*Producer)(nil),                                         // 1: producer.Producer
	(*License)(nil),                                          // 2: producer.License
	(*NewProducer)(nil),                                      // 3: producer.NewProducer
	(*NPNLookup)(nil),                                        // 4: producer.NPNLookup
	(*AgencyLookup)(nil),                                     // 5: producer.AgencyLookup
	(*LicenseLookup)(nil),                                    // 6: producer.LicenseLookup
	(*SSNLookup)(nil),                                        // 7: producer.SSNLookup
	(*ListNewProducersRequest)(nil),                          // 8: producer.ListNewProducersRequest
	(*ListNewProducersResponse)(nil),                         // 9: producer.ListNewProducersResponse
	(*ListUpdatedProducersRequest)(nil),                      // 10: producer.ListUpdatedProducersRequest
	(*ListUpdatedProducersResponse)(nil),                     // 11: producer.ListUpdatedProducersResponse
	(*MarkAsProcessedRequest)(nil),                           // 12: producer.MarkAsProcessedRequest
	(*NewProducerRequest)(nil),                               // 13: producer.NewProducerRequest
	(*NewProducersRequest)(nil),                              // 14: producer.NewProducersRequest
	(*Producer_Biographic)(nil),                              // 15: producer.Producer.Biographic
	(*Producer_ProducerRegulatoryInfo)(nil),                  // 16: producer.Producer.ProducerRegulatoryInfo
	(*Producer_Appointment)(nil),                             // 17: producer.Producer.Appointment
	(*Producer_ProducerRegulatoryInfo_RegulatoryAction)(nil), // 18: producer.Producer.ProducerRegulatoryInfo.RegulatoryAction
	nil,                           // 19: producer.Producer.ProducerRegulatoryInfo.RegulatoryActionsByStateEntry
	(*timestamppb.Timestamp)(nil), // 20: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),         // 21: google.protobuf.Empty
}
var file_producer_proto_depIdxs = []int32{
	2,  // 0: producer.Producer.licenses:type_name -> producer.License
	15, // 1: producer.Producer.biographic:type_name -> producer.Producer.Biographic
	16, // 2: producer.Producer.regulatory_info:type_name -> producer.Producer.ProducerRegulatoryInfo
	17, // 3: producer.Producer.appointments:type_name -> producer.Producer.Appointment
	0,  // 4: producer.License.status:type_name -> producer.License.LicenseStatus
	20, // 5: producer.License.expiration_date:type_name -> google.protobuf.Timestamp
	20, // 6: producer.License.updated_at:type_name -> google.protobuf.Timestamp
	4,  // 7: producer.NewProducer.npn_lookup:type_name -> producer.NPNLookup
	5,  // 8: producer.NewProducer.agency_lookup:type_name -> producer.AgencyLookup
	6,  // 9: producer.NewProducer.license_lookup:type_name -> producer.LicenseLookup
	7,  // 10: producer.NewProducer.ssn_lookup:type_name -> producer.SSNLookup
	1,  // 11: producer.ListNewProducersResponse.new_producers:type_name -> producer.Producer
	1,  // 12: producer.ListUpdatedProducersResponse.updated_producers:type_name -> producer.Producer
	3,  // 13: producer.NewProducerRequest.producer:type_name -> producer.NewProducer
	3,  // 14: producer.NewProducersRequest.producers:type_name -> producer.NewProducer
	20, // 15: producer.Producer.Biographic.date_of_birth:type_name -> google.protobuf.Timestamp
	19, // 16: producer.Producer.ProducerRegulatoryInfo.regulatory_actions_by_state:type_name -> producer.Producer.ProducerRegulatoryInfo.RegulatoryActionsByStateEntry
	20, // 17: producer.Producer.Appointment.appointment_renewal_date:type_name -> google.protobuf.Timestamp
	20, // 18: producer.Producer.ProducerRegulatoryInfo.RegulatoryAction.date_of_action:type_name -> google.protobuf.Timestamp
	20, // 19: producer.Producer.ProducerRegulatoryInfo.RegulatoryAction.effective_date:type_name -> google.protobuf.Timestamp
	20, // 20: producer.Producer.ProducerRegulatoryInfo.RegulatoryAction.enter_date:type_name -> google.protobuf.Timestamp
	18, // 21: producer.Producer.ProducerRegulatoryInfo.RegulatoryActionsByStateEntry.value:type_name -> producer.Producer.ProducerRegulatoryInfo.RegulatoryAction
	8,  // 22: producer.ProducerService.ListNewProducers:input_type -> producer.ListNewProducersRequest
	10, // 23: producer.ProducerService.ListUpdatedProducers:input_type -> producer.ListUpdatedProducersRequest
	12, // 24: producer.ProducerService.MarkAsProcessed:input_type -> producer.MarkAsProcessedRequest
	13, // 25: producer.ProducerService.NewProducer:input_type -> producer.NewProducerRequest
	14, // 26: producer.ProducerService.NewProducers:input_type -> producer.NewProducersRequest
	9,  // 27: producer.ProducerService.ListNewProducers:output_type -> producer.ListNewProducersResponse
	11, // 28: producer.ProducerService.ListUpdatedProducers:output_type -> producer.ListUpdatedProducersResponse
	21, // 29: producer.ProducerService.MarkAsProcessed:output_type -> google.protobuf.Empty
	21, // 30: producer.ProducerService.NewProducer:output_type -> google.protobuf.Empty
	21, // 31: producer.ProducerService.NewProducers:output_type -> google.protobuf.Empty
	27, // [27:32] is the sub-list for method output_type
	22, // [22:27] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_producer_proto_init() }
func file_producer_proto_init() {
	if File_producer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_producer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Producer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_producer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*License); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_producer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewProducer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_producer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NPNLookup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_producer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgencyLookup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_producer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseLookup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_producer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SSNLookup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_producer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNewProducersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_producer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNewProducersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_producer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUpdatedProducersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_producer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUpdatedProducersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_producer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkAsProcessedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_producer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewProducerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_producer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewProducersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_producer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Producer_Biographic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_producer_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Producer_ProducerRegulatoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_producer_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Producer_Appointment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_producer_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Producer_ProducerRegulatoryInfo_RegulatoryAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_producer_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*NewProducer_NpnLookup)(nil),
		(*NewProducer_AgencyLookup)(nil),
		(*NewProducer_LicenseLookup)(nil),
		(*NewProducer_SsnLookup)(nil),
	}
	file_producer_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_producer_proto_msgTypes[9].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_producer_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_producer_proto_goTypes,
		DependencyIndexes: file_producer_proto_depIdxs,
		EnumInfos:         file_producer_proto_enumTypes,
		MessageInfos:      file_producer_proto_msgTypes,
	}.Build()
	File_producer_proto = out.File
	file_producer_proto_rawDesc = nil
	file_producer_proto_goTypes = nil
	file_producer_proto_depIdxs = nil
}
